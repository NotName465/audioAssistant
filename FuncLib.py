import psutil
import ctypes
import os
import time
import pyperclip
import webbrowser
import pyautogui

def is_app_running(app_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –µ–≥–æ –ø—É—Ç–∏"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        target_path = os.path.abspath(app_path).lower()

        for process in psutil.process_iter(['pid', 'name', 'exe']):
            try:
                process_exe = process.info['exe']
                if process_exe and os.path.abspath(process_exe).lower() == target_path:
                    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: {process.info['pid']})")
                    return True
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def restore_browser_window():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    user32 = ctypes.windll.user32

    def enum_windows(hwnd, param):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
            if not user32.IsWindowVisible(hwnd):
                return True

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            length = user32.GetWindowTextLengthW(hwnd)
            if length > 0:
                buffer = ctypes.create_unicode_buffer(length + 1)
                user32.GetWindowTextW(hwnd, buffer, length + 1)
                title = buffer.value

                # –ò—â–µ–º –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
                if title and any(keyword in title for keyword in ['Yandex', '–Ø–Ω–¥–µ–∫—Å¬†–ë—Ä–∞—É–∑–µ—Ä', 'Opera', 'Chrome', 'Firefox', 'Edge']):
                    print(f"–ù–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä: {title}")

                    if user32.IsIconic(hwnd):
                        user32.ShowWindow(hwnd, 9)

                    user32.SetForegroundWindow(hwnd)
                    return False
        except:
            pass
        return True

    callback = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_void_p, ctypes.c_void_p)(enum_windows)
    user32.EnumWindows(callback, 0)


def open_browser_and_search(browser_path: str, search_query: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WinAPI
    user32 = ctypes.windll.user32
    VK_CONTROL = 0x11
    VK_RETURN = 0x0D
    VK_V = 0x56
    KEYEVENTF_KEYUP = 0x0002

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        original_clipboard = pyperclip.paste()
        # print(f"üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞: '{original_clipboard}'")

        # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        pyperclip.copy(search_query)
        # print(f"‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: '{search_query}'")

        if(is_app_running(browser_path)):
            restore_browser_window()
        else:
            try:
                os.startfile(browser_path)
            except:
                webbrowser.open("http://yandex.ru")
            time.sleep(1)
        # –§–æ–∫—É—Å –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        pyautogui.hotkey('ctrl', 'w')
        time.sleep(0.5)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (Ctrl+V)
        user32.keybd_event(VK_CONTROL, 0, 0, 0)
        user32.keybd_event(VK_V, 0, 0, 0)
        user32.keybd_event(VK_V, 0, KEYEVENTF_KEYUP, 0)
        user32.keybd_event(VK_CONTROL, 0, KEYEVENTF_KEYUP, 0)
        time.sleep(0.5)

        # –ù–∞–∂–∞—Ç–∏–µ Enter
        user32.keybd_event(VK_RETURN, 0, 0, 0)
        user32.keybd_event(VK_RETURN, 0, KEYEVENTF_KEYUP, 0)

        time.sleep(1)

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        pyperclip.copy(original_clipboard)

        print("‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            pyperclip.copy(original_clipboard)
            print(f"üîÑ –ë—É—Ñ–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        except:
            pass
        return False



def remove_keywords(input_string, remove_all=True, case_sensitive=False):
    keywords_dict = {
        "browser": ['–Ω–∞–π–¥–∏', "–≤", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"],
        "go_to_tab": ["–æ—Ç–∫—Ä–æ–π", "–≤–∫–ª–∞–¥–∫—É"]
    }

    if not case_sensitive:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        original_string = input_string
        input_string_lower = input_string.lower()
        keywords_dict_lower = {key: [word.lower() for word in words]
                               for key, words in keywords_dict.items()}
    else:
        original_string = input_string
        input_string_lower = input_string
        keywords_dict_lower = keywords_dict

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    all_keywords = []
    for words in keywords_dict_lower.values():
        if isinstance(words, list):
            all_keywords.extend(words)

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    words = original_string.split()
    words_lower = input_string_lower.split()

    removed_words = []
    result_words = []

    for i, word in enumerate(words):
        word_lower = words_lower[i]
        word_removed = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∫–ª—é—á–µ–≤—ã–º
        if remove_all:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if word_lower not in all_keywords:
                result_words.append(word)
            else:
                removed_words.append(word)
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            if word_lower in all_keywords and not removed_words:
                removed_words.append(word)
                word_removed = True
            else:
                result_words.append(word)

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    result = ' '.join(result_words)

    return result


def close_tab():
    """–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É"""
    pyautogui.hotkey('ctrl', 'w')
    time.sleep(0.5)
    print("‚ùå –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

def new_tab():
    """–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞"""
    pyautogui.hotkey('ctrl', 't')
    time.sleep(0.5)
    print("‚ûï –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")


def go_to_tab(tab_number, browser_path: str = " "):
    if (not is_app_running(browser_path)):
        restore_browser_window()
    else:
        try:
            os.startfile(browser_path)
        except:
            webbrowser.open("http://yandex.ru")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ü–∏—Ñ—Ä—ã
    number_words = {
        '–ø–µ—Ä–≤': 1, '–ø–µ—Ä–≤–∞': 1, '–ø–µ—Ä–≤–æ–π': 1, '–ø–µ—Ä–≤—É—é': 1, '–æ–¥–∏–Ω': 1,
        '–≤—Ç–æ—Ä': 2, '–≤—Ç–æ—Ä–∞': 2, '–≤—Ç–æ—Ä–æ–π': 2, '–≤—Ç–æ—Ä—É—é': 2, '–¥–≤–∞': 2,
        '—Ç—Ä–µ—Ç': 3, '—Ç—Ä–µ—Ç—å': 3, '—Ç—Ä–µ—Ç–∏–π': 3, '—Ç—Ä–µ—Ç—å—é': 3, '—Ç—Ä–∏': 3,
        '—á–µ—Ç–≤–µ—Ä—Ç': 4, '—á–µ—Ç–≤–µ—Ä—Ç–∞': 4, '—á–µ—Ç–≤–µ—Ä—Ç–æ–π': 4, '—á–µ—Ç–≤–µ—Ä—Ç—É—é': 4, '—á–µ—Ç—ã—Ä–µ': 4,
        '–ø—è—Ç': 5, '–ø—è—Ç–∞': 5, '–ø—è—Ç—ã–π': 5, '–ø—è—Ç—É—é': 5, '–ø—è—Ç—å': 5,
        '—à–µ—Å—Ç': 6, '—à–µ—Å—Ç–∞': 6, '—à–µ—Å—Ç–æ–π': 6, '—à–µ—Å—Ç—É—é': 6, '—à–µ—Å—Ç—å': 6,
        '—Å–µ–¥—å–º': 7, '—Å–µ–¥—å–º–∞': 7, '—Å–µ–¥—å–º–æ–π': 7, '—Å–µ–¥—å–º—É—é': 7, '—Å–µ–º—å': 7,
        '–≤–æ—Å—å–º': 8, '–≤–æ—Å—å–º–∞': 8, '–≤–æ—Å—å–º–æ–π': 8, '–≤–æ—Å—å–º—É—é': 8, '–≤–æ—Å–µ–º—å': 8,
        '–¥–µ–≤—è—Ç': 9, '–¥–µ–≤—è—Ç–∞': 9, '–¥–µ–≤—è—Ç—ã–π': 9, '–¥–µ–≤—è—Ç—É—é': 9, '–¥–µ–≤—è—Ç—å': 9,
    }
    original_input = tab_number

    try:
        # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ
        if isinstance(tab_number, int):
            final_number = tab_number

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        elif isinstance(tab_number, str):
            tab_number = tab_number.lower().strip()

            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ü–∏—Ñ—Ä—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
            if tab_number.isdigit():
                final_number = int(tab_number)
            else:
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                found_number = None
                for word, number in number_words.items():
                    if word in tab_number:
                        found_number = number
                        break

                if found_number:
                    final_number = found_number
                else:
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ü–∏—Ñ—Ä—É –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    digits = ''.join(filter(str.isdigit, tab_number))
                    if digits:
                        final_number = int(digits)
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–∫–ª–∞–¥–∫–∏: '{original_input}'")
                        return False

        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(tab_number)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if 1 <= final_number <= 9:
            pyautogui.hotkey('ctrl', str(final_number))
            time.sleep(0.3)
            current_tab = final_number - 1
            print(f"üéØ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ {original_input} –≤–∫–ª–∞–¥–∫—É (#{final_number})")
            return True
        else:
            print(f"‚ùå –ù–æ–º–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 9, –ø–æ–ª—É—á–µ–Ω–æ: {final_number}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '{original_input}': {e}")
        return False

