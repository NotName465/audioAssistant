import vosk
import pyaudio
import json
import os
import webbrowser
import time


def openBrowser(browserUrl: str = ""):
    try:
        os.startfile(browserUrl)
    except:
        webbrowser.open("http://yandex.ru")


def closeBrowser(closeName: str):
    os.system(f"taskkill /f /im {closeName}")


def openDota2(startFileUrl: str = ""):
    startFileUrl = r"C:\Users\user\Desktop\Dota 2.url"
    os.startfile(startFileUrl)


def closeDota2():
    DotaName = "dota2.exe"
    os.system(f"taskkill /f /im {DotaName}")


def Sorter(text: str):
    sorted_text = text.split(" ")
    return sorted_text


def Starter(text: list, browserUrl: str = ""):
    browserUrl = r"C:\Users\user\AppData\Local\Programs\Opera GX\opera.exe"
    forClose = browserUrl.split('\\')[-1]

    text_str = " ".join(text).lower()

    if "–æ—Ç–∫—Ä–æ–π" in text_str and "–±—Ä–∞—É–∑–µ—Ä" in text_str:
        openBrowser(browserUrl)
        print("–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä")
    elif "–∑–∞–∫—Ä–æ–π" in text_str and "–±—Ä–∞—É–∑–µ—Ä" in text_str:
        closeBrowser(forClose)
        print("–ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä")
    elif "–æ—Ç–∫—Ä–æ–π" in text_str and "–¥–æ—Ç—É" in text_str:
        openDota2()
        print("–û—Ç–∫—Ä—ã–≤–∞—é Dota 2")
    elif "–∑–∞–∫—Ä–æ–π" in text_str and "–¥–æ—Ç—É" in text_str:
        closeDota2()
        print("–ó–∞–∫—Ä—ã–≤–∞—é Dota 2")


def VoiceActive(activation_word="–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"):

    MODEL_PATH = r"C:\Users\user\PycharmProjects\audioAssistant\vosk-model-small-ru-0.22"

    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    model = vosk.Model(MODEL_PATH)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
    mic = pyaudio.PyAudio()
    stream = mic.open(
        format=pyaudio.paInt16,
        channels=1,
        rate=16000,
        input=True,
        frames_per_buffer=1024  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    )

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    activation_recognizer = vosk.KaldiRecognizer(model, 16000)
    main_recognizer = vosk.KaldiRecognizer(model, 16000)

    print(f"üéß –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{activation_word}'")

    try:
        while True:
            # –§–ê–ó–ê 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            activation_detected = False

            while not activation_detected:
                data = stream.read(512, exception_on_overflow=False)

                if activation_recognizer.AcceptWaveform(data):
                    result = json.loads(activation_recognizer.Result())
                    text = result.get('text', '').lower()

                    if activation_word in text:
                        print(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{activation_word}'")
                        activation_detected = True
                        break

            # –§–ê–ó–ê 2: –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            print("–°–ª—É—à–∞—é")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –Ω–∞—á–∞–ª–∞
            main_recognizer = vosk.KaldiRecognizer(model, 16000)

            silence_timeout = 0
            max_silence = 10  # 10 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

            while silence_timeout < max_silence:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                data = stream.read(2048, exception_on_overflow=False)

                if main_recognizer.AcceptWaveform(data):
                    result = json.loads(main_recognizer.Result())
                    text = result.get('text', '')

                    if text:
                        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                        processed_text = Sorter(text)
                        Starter(processed_text)
                        silence_timeout = 0
                    else:
                        silence_timeout += 0.5
                else:
                    # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ –≥–æ–≤–æ—Ä–∏–º)
                    partial = json.loads(main_recognizer.PartialResult())
                    partial_text = partial.get('partial', '')
                    if partial_text:
                        print(f"–ì–æ–≤–æ—Ä–∏—Ç–µ...: {partial_text}")
                        silence_timeout = 0
                    else:
                        silence_timeout += 0.2

                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

            print("–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            activation_recognizer = vosk.KaldiRecognizer(model, 16000)

    except KeyboardInterrupt:
        print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    finally:
        stream.stop_stream()
        stream.close()
        mic.terminate()


class EnhancedVoiceRecognizer:
    def __init__(self, model_path):
        self.model = vosk.Model(model_path)
        self.recognizer = vosk.KaldiRecognizer(self.model, 16000)

        self.enhancement_dict = {
            "–¥—É—Ö –º–∞—à–∏–Ω—ã": [" –¥—É—Ö–º–∞—à–∏–Ω—ã", "–º–∞—à–∏–Ω–Ω—ã–π –¥—É—Ö", "–¥—É—Ö –º–∞—à–∏–Ω–µ", "–¥—É—Ö –º–∞—à–∏–Ω—É"],
            "–º–∞—à–∏–Ω–Ω—ã–π –¥—É—Ö": ["–º–∞—à–∏–Ω–Ω—ã–µ –¥—É—Ö"]
        }


if __name__ == "__main__":
    VoiceActive("–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")